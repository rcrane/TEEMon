programs:
  # Track shrink_node latency, mainly for purposes of seeing latecy
  # of memory allocation slowpath.
  - name: shrinklat
    metrics:
      histograms:
        - name: shrink_node_latency_seconds
          help: Latency histogram for shrink_node calls
          table: shrink_node_latency
          bucket_type: exp2
          bucket_min: 0
          bucket_max: 26
          bucket_multiplier: 0.000001 # microseconds to seconds
          labels:
            - name: bucket
              size: 8
              decoders:
                - name: uint
    kprobes:
      shrink_node: shrink_node_start
    kretprobes:
      shrink_node: shrink_node_end
    code: |
      #include <uapi/linux/ptrace.h>

      // 27 buckets for latency, max range is 33.6s .. 67.1s
      const u8 max_latency_slot = 26;

      // Histograms to record latencies
      BPF_HISTOGRAM(shrink_node_latency, u64, max_latency_slot + 2);

      // Pid to start time map
      BPF_HASH(start, u32);

      int shrink_node_start(struct pt_regs *ctx) {
          u32 pid = bpf_get_current_pid_tgid();

          u64 ts = bpf_ktime_get_ns();
          start.update(&pid, &ts);

          return 0;
      }

      int shrink_node_end(struct pt_regs *ctx) {
          u32 pid = bpf_get_current_pid_tgid();

          u64 *tsp = start.lookup(&pid);
          if (tsp == 0) {
              return 0;
          }

          // Latency in microseconds
          u64 latency_us = (bpf_ktime_get_ns() - *tsp) / 1000;

          // Latency histogram key
          u64 latency_slot = bpf_log2l(latency_us);

          // Cap latency bucket at max value
          if (latency_slot > max_latency_slot) {
              latency_slot = max_latency_slot;
          }

          // Increment bucket key
          shrink_node_latency.increment(latency_slot);

          // Increment sum key
          shrink_node_latency.increment(max_latency_slot + 1, latency_us);

          // Remove started task
          start.delete(&pid);

          return 0;
      }
